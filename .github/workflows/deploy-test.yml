name: Deployment Test

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install --include=optional sharp

      - name: Set up MySQL using Docker
        run: docker run --name mysql-test -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=exzly -p 3306:3306 -d mysql:8

      - name: Wait for MySQL to be ready
        run: |
          until docker exec mysql-test mysqladmin --user=root --password=password --host=127.0.0.1 --port=3306 ping --silent; do
            echo "Waiting for MySQL to be ready..."
            sleep 5
          done

      - name: Create env file
        run: |
          echo "TZ = ${{ vars.TZ }}" >> .env
          echo "PORT = ${{ secrets.PORT }}" >> .env
          echo "APP_NAME = ${{ vars.APP_NAME }}" >> .env
          echo "NODE_ENV = test" >> .env
          echo "TRUST_PROXY = ${{ secrets.TRUST_PROXY }}" >> .env
          echo "STORAGE_PATH = ${{ secrets.STORAGE_PATH }}" >> .env
          echo "SESSION_SECRET = ${{ secrets.SESSION_SECRET }}" >> .env
          echo "SESSION_EXPIRATION = ${{ secrets.SESSION_EXPIRATION }}" >> .env

          # HTTPS
          echo "ENABLE_HTTPS = ${{ vars.ENABLE_HTTPS }}" >> .env
          echo "SSL_KEY_FILE = ${{ secrets.SSL_KEY_FILE }}" >> .env
          echo "SSL_CERT_FILE = ${{ secrets.SSL_CERT_FILE }}" >> .env

          # Database
          echo "DB_SYNC = ${{ vars.DB_SYNC }}" >> .env
          echo "DB_MODE = ${{ vars.DB_MODE }}" >> .env

          # Security: JWT
          echo "JWT_SECRET = ${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRATION = ${{ secrets.JWT_EXPIRATION }}" >> .env

          # SMTP
          echo "SMTP_PORT = ${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_HOST = ${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_FROM = ${{ secrets.SMTP_FROM }}" >> .env
          echo "SMTP_USER = ${{ secrets.SMTP_USER }}" >> .env
          echo "SMTP_PASS = ${{ secrets.SMTP_PASS }}" >> .env

          # Routes
          echo "WEB_ROUTE = ${{ secrets.WEB_ROUTE }}" >> .env
          echo "API_ROUTE = ${{ secrets.API_ROUTE }}" >> .env
          echo "ADMIN_ROUTE = ${{ secrets.ADMIN_ROUTE }}" >> .env
        working-directory: ${{ github.workspace }}

      - name: 'Database config: database name'
        uses: jossef/action-set-json-field@v2.2
        with:
          file: 'database/config.json'
          field: 'test.database'
          value: 'exzly'

      - name: 'Database config: database username'
        uses: jossef/action-set-json-field@v2.2
        with:
          file: 'database/config.json'
          field: 'test.username'
          value: 'root'

      - name: 'Database config: database password'
        uses: jossef/action-set-json-field@v2.2
        with:
          file: 'database/config.json'
          field: 'test.password'
          value: 'password'

      - name: 'Database config: database password'
        run: npm install mysql

      - name: Test MySQL Connection
        run: |
          node -e "
            const mysql = require('mysql2');
            const connection = mysql.createConnection({
              host: '127.0.0.1',
              user: 'root',
              password: 'password',
              database: 'exzly'
            });

            connection.connect((err) => {
              if (err) {
                console.error('Error connecting to the database:', err);
                process.exit(1);
              } else {
                console.log('Database connected successfully!');
                connection.end();
              }
            });
          "

      - name: Start application in the background
        run: |
          nohup npm start &
          echo $! > npm.pid

      - name: Wait for application to start
        run: |
          sleep 10

      - name: Stop application
        run: |
          kill $(cat npm.pid)

      - name: Stop MySQL container
        run: docker stop mysql-test && docker rm mysql-test
